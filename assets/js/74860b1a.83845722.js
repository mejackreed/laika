"use strict";(self.webpackChunk_zendesk_laika_docs=self.webpackChunk_zendesk_laika_docs||[]).push([[133],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=s(n),d=i,m=f["".concat(c,".").concat(d)]||f[d]||u[d]||a;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6333:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),o=["components"],l={id:"pitfalls",title:"Pitfalls",sidebar_label:"Pitfalls",custom_edit_url:null,hide_title:!0},c="Pitfalls",s={unversionedId:"pitfalls",id:"pitfalls",title:"Pitfalls",description:"Interceptor specificity vs ordering",source:"@site/docs/pitfalls.md",sourceDirName:".",slug:"/pitfalls",permalink:"/laika/docs/pitfalls",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"pitfalls",title:"Pitfalls",sidebar_label:"Pitfalls",custom_edit_url:null,hide_title:!0},sidebar:"default",previous:{title:"Logging and recording",permalink:"/laika/docs/logging-and-recording"},next:{title:"Laika.Laika",permalink:"/laika/docs/api/classes/Laika.Laika-1"}},p={},u=[{value:"Interceptor specificity vs ordering",id:"interceptor-specificity-vs-ordering",level:2}],f={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pitfalls"},"Pitfalls"),(0,a.kt)("h2",{id:"interceptor-specificity-vs-ordering"},"Interceptor specificity vs ordering"),(0,a.kt)("p",null,"Every interceptor you create should be as specific as needed in a given session. At the very least, ensure the order of creating interceptors is from most specific, to least specific."),(0,a.kt)("p",null,"This is because any operations that are executed by your client will end up being intercepted\nby the ",(0,a.kt)("strong",{parentName:"p"},"first")," interceptor that matches the constraints of the ",(0,a.kt)("a",{parentName:"p",href:"api/modules/typedefs#matcher"},(0,a.kt)("em",{parentName:"a"},"Matcher")),"."),(0,a.kt)("p",null,"To ilustrate, think about what would happen if you did this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const absolutelyEverythingInterceptor = laika.intercept(/* no constraints */);\n\nconst onlyActiveUsersInterceptor = laika.intercept({\n  clientName: 'users',\n  operationName: 'getActiveUsers',\n});\n\n// this will not work:\nonlyActiveUsersInterceptor.mockResultOnce(\n  {result: {data: {users: [{id: 1, name: 'Mouse'}, {id: 2, name: 'Bamboo'}]}}},\n);\n")),(0,a.kt)("p",null,"Now, say a React component with ",(0,a.kt)("inlineCode",{parentName:"p"},"useQuery(getActiveUsersQuery)")," is mounted.\nOur mocked result will not end up being sent to the React component.\nWhy? Because the first interceptor that satisfied all constraints (i.e. ",(0,a.kt)("em",{parentName:"p"},"none"),"),\nwas actually ",(0,a.kt)("inlineCode",{parentName:"p"},"absolutelyEverythingInterceptor"),"."),(0,a.kt)("p",null,"Since we haven't configured any behavior for this interceptor, it will passthrough\nthe request to the backend."),(0,a.kt)("p",null,"However if you'd reverse the order of creation of each intercept, this would work correctly."))}d.isMDXComponent=!0}}]);